Project4

Project 4a: Scalable Web Server

SCALABLE WEB SERVER : The code implements multiple threads support for a scalable webserver. Steps taken :
  1. Main thread initializes the number of worker threads and max client buffer size.
  2. The client buffer size provided as argument helps to make a queue for the incoming connection file descriptor's.
  3. The queue is implemented as a circular array, wherein packets are dequeued based on FIFO.
  4. Main thread spawns a pool of worker  threads and open a socket connection to listen on the specified port.
  5. Main thread runs a continuous loop to accept new connection in the incoming socket and collects the file descriptor , wherein the data for the connection would be received.
  6. The worker threads ,also in a loop,  start by checking if buffer queue is empty . It checks the following after placing a lock.
  If yes, they wait for connections to be placed in the queue. If not, it dequeues a connection and then signals the main thread using a condition variable "empty" so that it can fill in a new connection next time it runs.
  7. When the main threads accepts a connection and is scheduled to tun, it uses a mutex to check if the queue is not full. If not, it
  goes ahead and inserts a  new connection into the queue. After this it signals the worker threads, by using another CV "full" ,to wake up and start removing connection next time they run.
  8. Thus the buffer queue is locked before any operation on it and the worker and main threads accomplish concurrency.

Project 4b: xv6 Kernel Threads

* We first created the user thread library uthread.c with thread_create and thread_join methods. We allocated memory for stack in thread_create, and freed that in thread_join.
* After that, we started implementing clone and join system call. We modified the related files like sysproc.c to implement the system call. After that wrote a stub method clone and join in proc.c. At this point these methods would just print the method name and input arguments(will no do any actual work).
* One we ensured that correct values of fcn,arg,stack are reaching clone and join in proc.c, we started implementing clone and join methods in proc.c
* For clone we referenced exec and fork methods: we allocated new process, shared the address space with calling process, filled the ustack and copied it to stack, and set the stack pointer and instruction pointer properly.
* For join we referenced wait method: we made sure not to handle forked processes and set the value to input parameter stack to correct stack location. We also modifed wait method to not handle threads.
* We added a trap handler to handle fake return at 0xffffffff and kill the process.
* We modified the growproc to correctly set the size in all threads.
* After that we defined lock_t and cond_t struct in types.h
* We implemented lock methods lock_init, lock_acquire, lock_release in thread library uthread.c
* We implemented cond_init in thread library uthread.c.
* We then implemented system calls for cond_wait and cond_signal.
* Upon testing with some test cases and noticing kernel panic, we modified the exit to kill the threads created by exiting process.
