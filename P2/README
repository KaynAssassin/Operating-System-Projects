Project 2a: The Unix Shell

In this project, we have tried to take care of the following things:
1) Taking input from the user, Making sure we flush the stdout buffer before we print anything else.
2) Parsing each input to form separate strings for each argument. Determine if its one of the builtin command, or not. If former, we handle the commands ourselves using system calls or functions such as getenv(), chdir(), getcwd().
3) We also parse the input for input or output redirection operators, pipeline operator or Background process operator and take note of it.
4) If its none of the inbuilt commands, we fork a new child to execute the program.
5) In case of input/output redirection, close the relevant Stdin/stdout and  open file descriptors for the given input or output file name so that expected output/input goes/comes towards/from relevant source.
6) In case of pipe, we fork another child to execute the other program. We use the pipe system call to create a pipe between these two child processes and dup the output pipe descriptor to the stdout  and dup the read pipe descriptor of the other process to stdin. So that they can communicate with each other . Also we close the file descriptors for the pipe in the child and parent again to help signal one child to other when  its done entering into buffer.
7) The parent process waits for the children using the waitpid() function .However, in case of executing a valid command with background execution, we don't wait for process,  executing the command, to change state(terminate) and move forward. We do this by using the WNOHANG option in the waitpid function.
8) Also , in case of background processes, we keep storing each background process command into an array of max 20 elements, and at the start of each loop, we make sure we try and reap the terminated processes(again using the waitpid() with WNOHANG option) so that they don't exist in zombie state for long.
9) Also, at the exit call, we try and reap all un-reaped zombie processes and send a SIGKILL signal to all the ones who are still running before exiting out main parent process.
  
Project 2b: xv6 Scheduler

1) For this project, We modified the proc.h file to add new member variables to proc struct. These variables will keep track of ticks, wait_ticks, current priority, and tics and wait_tics at each level of queue.
2) Then we implemented the MLFQ scheduler in proc.c file. In proc.c we used an array of pointers to proc to store the runnable processes at each priority.
3) We added menthods to add a process at given priority, delete a process from queue at given priority, update wait_tics of processes, and boost priority if processes.
4) We modified alloc process to add process at priority 3.
5) We modified the scheduler method to implement MLFQ.
6) We made sure priorities are boosted for starving processes, highest priority process is chosen to run, and process is demoted to lower priority if it has used its time slice.
7) We also modified to the sleep and wakeUp methods to delete process from the queue on sleep and add it back on wakeup.
8) Then we implemeted the getpinfo() call and made sure that data is filled properly in pstat struct. 
9) After that we tested with testcases and fixed the bugs. 
                                                  
